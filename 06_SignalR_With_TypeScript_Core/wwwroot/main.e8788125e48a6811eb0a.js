(()=>{"use strict";var e={252:(e,t,o)=>{o.r(t),o.d(t,{AbortError:()=>s,DefaultHttpClient:()=>R,HttpClient:()=>u,HttpError:()=>n,HttpResponse:()=>g,HttpTransportType:()=>O,HubConnection:()=>M,HubConnectionBuilder:()=>Y,HubConnectionState:()=>W,JsonHubProtocol:()=>Q,LogLevel:()=>d,MessageType:()=>N,NullLogger:()=>p,Subject:()=>j,TimeoutError:()=>r,TransferFormat:()=>F,VERSION:()=>_});class n extends Error{constructor(e,t){const o=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=o}}class r extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class s extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class i extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=o}}class c extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=o}}class a extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=o}}class l extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class h extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=o}}class g{constructor(e,t,o){this.statusCode=e,this.statusText=t,this.content=o}}class u{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var d;!function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(d||(d={}));class p{constructor(){}log(e,t){}}p.instance=new p;const _="6.0.6";class f{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,o){if(!(e in t))throw new Error(`Unknown ${o} value: ${e}.`)}}class w{static get isBrowser(){return"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}static get isReactNative(){return"object"==typeof window&&void 0===window.document}static get isNode(){return!this.isBrowser&&!this.isWebWorker&&!this.isReactNative}}function m(e,t){let o="";return b(e)?(o=`Binary data of length ${e.byteLength}`,t&&(o+=`. Content: '${function(e){const t=new Uint8Array(e);let o="";return t.forEach((e=>{o+=`0x${e<16?"0":""}${e.toString(16)} `})),o.substr(0,o.length-1)}(e)}'`)):"string"==typeof e&&(o=`String data of length ${e.length}`,t&&(o+=`. Content: '${e}'`)),o}function b(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}async function v(e,t,o,n,r,s,i){let c={};if(r){const e=await r();e&&(c={Authorization:`Bearer ${e}`})}const[a,l]=C();c[a]=l,e.log(d.Trace,`(${t} transport) sending data. ${m(s,i.logMessageContent)}.`);const h=b(s)?"arraybuffer":"text",g=await o.post(n,{content:s,headers:{...c,...i.headers},responseType:h,timeout:i.timeout,withCredentials:i.withCredentials});e.log(d.Trace,`(${t} transport) request complete. Response status: ${g.statusCode}.`)}class y{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch((e=>{}))}}class S{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const o=`[${(new Date).toISOString()}] ${d[e]}: ${t}`;switch(e){case d.Critical:case d.Error:this.out.error(o);break;case d.Warning:this.out.warn(o);break;case d.Information:this.out.info(o);break;default:this.out.log(o)}}}}function C(){let e="X-SignalR-User-Agent";return w.isNode&&(e="User-Agent"),[e,E(_,k(),w.isNode?"NodeJS":"Browser",T())]}function E(e,t,o,n){let r="Microsoft SignalR/";const s=e.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${e}; `,r+=t&&""!==t?`${t}; `:"Unknown OS; ",r+=`${o}`,r+=n?`; ${n}`:"; Unknown Runtime Version",r+=")",r}function k(){if(!w.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function T(){if(w.isNode)return process.versions.node}function I(e){return e.stack?e.stack:e.message?e.message:`${e}`}class P extends u{constructor(e){if(super(),this._logger=e,"undefined"==typeof fetch){const e=require;this._jar=new(e("tough-cookie").CookieJar),this._fetchType=e("node-fetch"),this._fetchType=e("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==o.g)return o.g;throw new Error("could not find global")}());if("undefined"==typeof AbortController){const e=require;this._abortControllerType=e("abort-controller")}else this._abortControllerType=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new s;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let o;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),o=new s});let i,c=null;if(e.timeout){const n=e.timeout;c=setTimeout((()=>{t.abort(),this._logger.log(d.Warning,"Timeout from HTTP request."),o=new r}),n)}try{i=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(e){if(o)throw o;throw this._logger.log(d.Warning,`Error from HTTP request. ${e}.`),e}finally{c&&clearTimeout(c),e.abortSignal&&(e.abortSignal.onabort=null)}if(!i.ok){const e=await $(i,"text");throw new n(e||i.statusText,i.status)}const a=$(i,e.responseType),l=await a;return new g(i.status,i.statusText,l)}getCookieString(e){let t="";return w.isNode&&this._jar&&this._jar.getCookies(e,((e,o)=>t=o.join("; "))),t}}function $(e,t){let o;switch(t){case"arraybuffer":o=e.arrayBuffer();break;case"text":default:o=e.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`)}return o}class D extends u{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new s):e.method?e.url?new Promise(((t,o)=>{const i=new XMLHttpRequest;i.open(e.method,e.url,!0),i.withCredentials=void 0===e.withCredentials||e.withCredentials,i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const c=e.headers;c&&Object.keys(c).forEach((e=>{i.setRequestHeader(e,c[e])})),e.responseType&&(i.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{i.abort(),o(new s)}),e.timeout&&(i.timeout=e.timeout),i.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),i.status>=200&&i.status<300?t(new g(i.status,i.statusText,i.response||i.responseText)):o(new n(i.response||i.responseText||i.statusText,i.status))},i.onerror=()=>{this._logger.log(d.Warning,`Error from HTTP request. ${i.status}: ${i.statusText}.`),o(new n(i.statusText,i.status))},i.ontimeout=()=>{this._logger.log(d.Warning,"Timeout from HTTP request."),o(new r)},i.send(e.content||"")})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class R extends u{constructor(e){if(super(),"undefined"!=typeof fetch||w.isNode)this._httpClient=new P(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new D(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new s):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class H{static write(e){return`${e}${H.RecordSeparator}`}static parse(e){if(e[e.length-1]!==H.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(H.RecordSeparator);return t.pop(),t}}H.RecordSeparatorCode=30,H.RecordSeparator=String.fromCharCode(H.RecordSeparatorCode);class x{writeHandshakeRequest(e){return H.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,o;if(b(e)){const n=new Uint8Array(e),r=n.indexOf(H.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(n.slice(0,s))),o=n.byteLength>s?n.slice(s).buffer:null}else{const n=e,r=n.indexOf(H.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;t=n.substring(0,s),o=n.length>s?n.substring(s):null}const n=H.parse(t),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[o,r]}}var N,W;!function(e){e[e.Invocation=1]="Invocation",e[e.StreamItem=2]="StreamItem",e[e.Completion=3]="Completion",e[e.StreamInvocation=4]="StreamInvocation",e[e.CancelInvocation=5]="CancelInvocation",e[e.Ping=6]="Ping",e[e.Close=7]="Close"}(N||(N={}));class j{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new y(this,e)}}!function(e){e.Disconnected="Disconnected",e.Connecting="Connecting",e.Connected="Connected",e.Disconnecting="Disconnecting",e.Reconnecting="Reconnecting"}(W||(W={}));class M{constructor(e,t,o,n){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(d.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},f.isRequired(e,"connection"),f.isRequired(t,"logger"),f.isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this._logger=t,this._protocol=o,this.connection=e,this._reconnectPolicy=n,this._handshakeProtocol=new x,this.connection.onreceive=e=>this._processIncomingData(e),this.connection.onclose=e=>this._connectionClosed(e),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=W.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:N.Ping})}static create(e,t,o,n){return new M(e,t,o,n)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==W.Disconnected&&this._connectionState!==W.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==W.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=W.Connecting,this._logger.log(d.Debug,"Starting HubConnection.");try{await this._startInternal(),w.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=W.Connected,this._connectionStarted=!0,this._logger.log(d.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=W.Disconnected,this._logger.log(d.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise(((e,t)=>{this._handshakeResolver=e,this._handshakeRejecter=t}));await this.connection.start(this._protocol.transferFormat);try{const t={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(d.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(t)),this._logger.log(d.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError}catch(e){throw this._logger.log(d.Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(e),e}}async stop(){const e=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch(e){}}_stopInternal(e){return this._connectionState===W.Disconnected?(this._logger.log(d.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===W.Disconnecting?(this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=W.Disconnecting,this._logger.log(d.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(d.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))}stream(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._createStreamInvocation(e,t,n);let s;const i=new j;return i.cancelCallback=()=>{const e=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],s.then((()=>this._sendWithProtocol(e)))},this._callbacks[r.invocationId]=(e,t)=>{t?i.error(t):e&&(e.type===N.Completion?e.error?i.error(new Error(e.error)):i.complete():i.next(e.item))},s=this._sendWithProtocol(r).catch((e=>{i.error(e),delete this._callbacks[r.invocationId]})),this._launchStreams(o,s),i}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._sendWithProtocol(this._createInvocation(e,t,!0,n));return this._launchStreams(o,r),r}invoke(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._createInvocation(e,t,!1,n);return new Promise(((e,t)=>{this._callbacks[r.invocationId]=(o,n)=>{n?t(n):o&&(o.type===N.Completion?o.error?t(new Error(o.error)):e(o.result):t(new Error(`Unexpected message type: ${o.type}`)))};const n=this._sendWithProtocol(r).catch((e=>{t(e),delete this._callbacks[r.invocationId]}));this._launchStreams(o,n)}))}on(e,t){e&&t&&(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const o=this._methods[e];if(o)if(t){const n=o.indexOf(t);-1!==n&&(o.splice(n,1),0===o.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const e of t)switch(e.type){case N.Invocation:this._invokeClientMethod(e);break;case N.StreamItem:case N.Completion:{const t=this._callbacks[e.invocationId];if(t){e.type===N.Completion&&delete this._callbacks[e.invocationId];try{t(e)}catch(e){this._logger.log(d.Error,`Stream callback threw error: ${I(e)}`)}}break}case N.Ping:break;case N.Close:{this._logger.log(d.Information,"Close message received from server.");const t=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(t):this._stopPromise=this._stopInternal(t);break}default:this._logger.log(d.Warning,`Invalid message type: ${e.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,o;try{[o,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(e){const t="Error parsing handshake response: "+e;this._logger.log(d.Error,t);const o=new Error(t);throw this._handshakeRejecter(o),o}if(t.error){const e="Server returned handshake error: "+t.error;this._logger.log(d.Error,e);const o=new Error(e);throw this._handshakeRejecter(o),o}return this._logger.log(d.Debug,"Server handshake complete."),this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout((async()=>{if(this._connectionState===W.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}}),e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(e){const t=this._methods[e.target.toLowerCase()];if(t){try{t.forEach((t=>t.apply(this,e.arguments)))}catch(t){this._logger.log(d.Error,`A callback for the method ${e.target.toLowerCase()} threw error '${t}'.`)}if(e.invocationId){const e="Server requested a response, which is not supported in this version of the client.";this._logger.log(d.Error,e),this._stopPromise=this._stopInternal(new Error(e))}}else this._logger.log(d.Warning,`No client method with the name '${e.target}' found.`)}_connectionClosed(e){this._logger.log(d.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===W.Disconnecting?this._completeClose(e):this._connectionState===W.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===W.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=W.Disconnected,this._connectionStarted=!1,w.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this._logger.log(d.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let o=0,n=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(o++,0,n);if(null===r)return this._logger.log(d.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(e);if(this._connectionState=W.Reconnecting,e?this._logger.log(d.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(d.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this._logger.log(d.Error,`An onreconnecting callback called with error '${e}' threw error '${t}'.`)}if(this._connectionState!==W.Reconnecting)return void this._logger.log(d.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this._logger.log(d.Information,`Reconnect attempt number ${o} will start in ${r} ms.`),await new Promise((e=>{this._reconnectDelayHandle=setTimeout(e,r)})),this._reconnectDelayHandle=void 0,this._connectionState!==W.Reconnecting)return void this._logger.log(d.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=W.Connected,this._logger.log(d.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach((e=>e.apply(this,[this.connection.connectionId])))}catch(e){this._logger.log(d.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this._logger.log(d.Information,`Reconnect attempt failed because of error '${e}'.`),this._connectionState!==W.Reconnecting)return this._logger.log(d.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===W.Disconnecting&&this._completeClose());n=e instanceof Error?e:new Error(e.toString()),r=this._getNextRetryDelay(o++,Date.now()-t,n)}}this._logger.log(d.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:o})}catch(o){return this._logger.log(d.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${o}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach((o=>{const n=t[o];try{n(null,e)}catch(t){this._logger.log(d.Error,`Stream 'error' callback called with '${e}' threw error: ${I(t)}`)}}))}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,o,n){if(o)return 0!==n.length?{arguments:t,streamIds:n,target:e,type:N.Invocation}:{arguments:t,target:e,type:N.Invocation};{const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:t,invocationId:o.toString(),streamIds:n,target:e,type:N.Invocation}:{arguments:t,invocationId:o.toString(),target:e,type:N.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const o in e)e[o].subscribe({complete:()=>{t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(o))))},error:e=>{let n;n=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(o,n))))},next:e=>{t=t.then((()=>this._sendWithProtocol(this._createStreamItemMessage(o,e))))}})}}_replaceStreamingParams(e){const t=[],o=[];for(let n=0;n<e.length;n++){const r=e[n];if(this._isObservable(r)){const s=this._invocationId;this._invocationId++,t[s]=r,o.push(s.toString()),e.splice(n,1)}}return[t,o]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,o){const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:t,invocationId:n.toString(),streamIds:o,target:e,type:N.StreamInvocation}:{arguments:t,invocationId:n.toString(),target:e,type:N.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:N.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:N.StreamItem}}_createCompletionMessage(e,t,o){return t?{error:t,invocationId:e,type:N.Completion}:{invocationId:e,result:o,type:N.Completion}}}const A=[0,2e3,1e4,3e4,null];class L{constructor(e){this._retryDelays=void 0!==e?[...e,null]:A}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class q{}var O,F;q.Authorization="Authorization",q.Cookie="Cookie",function(e){e[e.None=0]="None",e[e.WebSockets=1]="WebSockets",e[e.ServerSentEvents=2]="ServerSentEvents",e[e.LongPolling=4]="LongPolling"}(O||(O={})),function(e){e[e.Text=1]="Text",e[e.Binary=2]="Binary"}(F||(F={}));class U{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class B{constructor(e,t,o,n){this._httpClient=e,this._accessTokenFactory=t,this._logger=o,this._pollAbort=new U,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(e,t){if(f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,F,"transferFormat"),this._url=e,this._logger.log(d.Trace,"(LongPolling transport) Connecting."),t===F.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,r]=C(),s={[o]:r,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:s,timeout:1e5,withCredentials:this._options.withCredentials};t===F.Binary&&(i.responseType="arraybuffer");const c=await this._getAccessToken();this._updateHeaderToken(i,c);const a=`${e}&_=${Date.now()}`;this._logger.log(d.Trace,`(LongPolling transport) polling: ${a}.`);const l=await this._httpClient.get(a,i);200!==l.statusCode?(this._logger.log(d.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new n(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _getAccessToken(){return this._accessTokenFactory?await this._accessTokenFactory():null}_updateHeaderToken(e,t){e.headers||(e.headers={}),t?e.headers[q.Authorization]=`Bearer ${t}`:e.headers[q.Authorization]&&delete e.headers[q.Authorization]}async _poll(e,t){try{for(;this._running;){const o=await this._getAccessToken();this._updateHeaderToken(t,o);try{const o=`${e}&_=${Date.now()}`;this._logger.log(d.Trace,`(LongPolling transport) polling: ${o}.`);const r=await this._httpClient.get(o,t);204===r.statusCode?(this._logger.log(d.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==r.statusCode?(this._logger.log(d.Error,`(LongPolling transport) Unexpected response code: ${r.statusCode}.`),this._closeError=new n(r.statusText||"",r.statusCode),this._running=!1):r.content?(this._logger.log(d.Trace,`(LongPolling transport) data received. ${m(r.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(r.content)):this._logger.log(d.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(e){this._running?e instanceof r?this._logger.log(d.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=e,this._running=!1):this._logger.log(d.Trace,`(LongPolling transport) Poll errored after shutdown: ${e.message}`)}}}finally{this._logger.log(d.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?v(this._logger,"LongPolling",this._httpClient,this._url,this._accessTokenFactory,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(d.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(d.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,o]=C();e[t]=o;const n={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials},r=await this._getAccessToken();this._updateHeaderToken(n,r),await this._httpClient.delete(this._url,n),this._logger.log(d.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(d.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(d.Trace,e),this.onclose(this._closeError)}}}class z{constructor(e,t,o,n){this._httpClient=e,this._accessTokenFactory=t,this._logger=o,this._options=n,this.onreceive=null,this.onclose=null}async connect(e,t){if(f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,F,"transferFormat"),this._logger.log(d.Trace,"(SSE transport) Connecting."),this._url=e,this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((o,n)=>{let r,s=!1;if(t===F.Text){if(w.isBrowser||w.isWebWorker)r=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),o={};o.Cookie=t;const[n,s]=C();o[n]=s,r=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...o,...this._options.headers}})}try{r.onmessage=e=>{if(this.onreceive)try{this._logger.log(d.Trace,`(SSE transport) data received. ${m(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this._close(e)}},r.onerror=e=>{s?this._close():n(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(d.Information,`SSE connected to ${this._url}`),this._eventSource=r,s=!0,o()}}catch(e){return void n(e)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this._eventSource?v(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class X{constructor(e,t,o,n,r,s){this._logger=o,this._accessTokenFactory=t,this._logMessageContent=n,this._webSocketConstructor=r,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=s}async connect(e,t){if(f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,F,"transferFormat"),this._logger.log(d.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((o,n)=>{let r;e=e.replace(/^http/,"ws");const s=this._httpClient.getCookieString(e);let i=!1;if(w.isNode){const t={},[o,n]=C();t[o]=n,s&&(t[q.Cookie]=`${s}`),r=new this._webSocketConstructor(e,void 0,{headers:{...t,...this._headers}})}r||(r=new this._webSocketConstructor(e)),t===F.Binary&&(r.binaryType="arraybuffer"),r.onopen=t=>{this._logger.log(d.Information,`WebSocket connected to ${e}.`),this._webSocket=r,i=!0,o()},r.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"There was an error with the transport",this._logger.log(d.Information,`(WebSockets transport) ${t}.`)},r.onmessage=e=>{if(this._logger.log(d.Trace,`(WebSockets transport) data received. ${m(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(e){return void this._close(e)}},r.onclose=e=>{if(i)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",n(new Error(t))}}}))}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(d.Trace,`(WebSockets transport) sending data. ${m(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(d.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class J{constructor(e,t={}){var o;if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,f.isRequired(e,"url"),this._logger=void 0===(o=t.logger)?new S(d.Information):null===o?p.instance:void 0!==o.log?o:new S(o),this.baseUrl=this._resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials,t.timeout=void 0===t.timeout?1e5:t.timeout;let n=null,r=null;if(w.isNode){const e=require;n=e("ws"),r=e("eventsource")}w.isNode||"undefined"==typeof WebSocket||t.WebSocket?w.isNode&&!t.WebSocket&&n&&(t.WebSocket=n):t.WebSocket=WebSocket,w.isNode||"undefined"==typeof EventSource||t.EventSource?w.isNode&&!t.EventSource&&void 0!==r&&(t.EventSource=r):t.EventSource=EventSource,this._httpClient=t.httpClient||new R(this._logger),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||F.Binary,f.isIn(e,F,"transferFormat"),this._logger.log(d.Debug,`Starting connection with transfer format '${F[e]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,"Disconnecting"===this._connectionState){const e="Failed to start the HttpConnection before stop() was called.";return this._logger.log(d.Error,e),await this._stopPromise,Promise.reject(new Error(e))}if("Connected"!==this._connectionState){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(d.Error,e),Promise.reject(new Error(e))}this._connectionStarted=!0}send(e){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new K(this.transport)),this._sendQueue.send(e))}async stop(e){return"Disconnected"===this._connectionState?(this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise((e=>{this._stopPromiseResolver=e})),await this._stopInternal(e),void await this._stopPromise)}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch(e){}if(this.transport){try{await this.transport.stop()}catch(e){this._logger.log(d.Error,`HttpConnection.transport.stop() threw error '${e}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(d.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==O.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(O.WebSockets),await this._startTransport(t,e)}else{let o=null,n=0;do{if(o=await this._getNegotiationResponse(t),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new Error("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(t=o.url),o.accessToken){const e=o.accessToken;this._accessTokenFactory=()=>e}n++}while(o.url&&n<100);if(100===n&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,o,e)}this.transport instanceof B&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(d.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(e){return this._logger.log(d.Error,"Failed to start the connection: "+e),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(e)}}async _getNegotiationResponse(e){const t={};if(this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t[q.Authorization]=`Bearer ${e}`)}const[o,r]=C();t[o]=r;const s=this._resolveNegotiateUrl(e);this._logger.log(d.Debug,`Sending negotiation request: ${s}.`);try{const e=await this._httpClient.post(s,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const o=JSON.parse(e.content);return(!o.negotiateVersion||o.negotiateVersion<1)&&(o.connectionToken=o.connectionId),o}catch(e){let t="Failed to complete negotiation with the server: "+e;return e instanceof n&&404===e.statusCode&&(t+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(d.Error,t),Promise.reject(new l(t))}}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async _createTransport(e,t,o,n){let r=this._createConnectUrl(e,o.connectionToken);if(this._isITransport(t))return this._logger.log(d.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(r,n),void(this.connectionId=o.connectionId);const s=[],i=o.availableTransports||[];let c=o;for(const o of i){const i=this._resolveTransportOrError(o,t,n);if(i instanceof Error)s.push(`${o.transport} failed:`),s.push(i);else if(this._isITransport(i)){if(this.transport=i,!c){try{c=await this._getNegotiationResponse(e)}catch(e){return Promise.reject(e)}r=this._createConnectUrl(e,c.connectionToken)}try{return await this._startTransport(r,n),void(this.connectionId=c.connectionId)}catch(e){if(this._logger.log(d.Error,`Failed to start the transport '${o.transport}': ${e}`),c=void 0,s.push(new a(`${o.transport} failed: ${e}`,O[o.transport])),"Connecting"!==this._connectionState){const e="Failed to select transport before stop() was called.";return this._logger.log(d.Debug,e),Promise.reject(new Error(e))}}}}return s.length>0?Promise.reject(new h(`Unable to connect to the server with any of the available transports. ${s.join(" ")}`,s)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case O.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new X(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case O.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new z(this._httpClient,this._accessTokenFactory,this._logger,this._options);case O.LongPolling:return new B(this._httpClient,this._accessTokenFactory,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.transport.onclose=e=>this._stopConnection(e),this.transport.connect(e,t)}_resolveTransportOrError(e,t,o){const n=O[e.transport];if(null==n)return this._logger.log(d.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!=(t&e)}(t,n))return this._logger.log(d.Debug,`Skipping transport '${O[n]}' because it was disabled by the client.`),new c(`'${O[n]}' is disabled by the client.`,n);if(!(e.transferFormats.map((e=>F[e])).indexOf(o)>=0))return this._logger.log(d.Debug,`Skipping transport '${O[n]}' because it does not support the requested transfer format '${F[o]}'.`),new Error(`'${O[n]}' does not support ${F[o]}.`);if(n===O.WebSockets&&!this._options.WebSocket||n===O.ServerSentEvents&&!this._options.EventSource)return this._logger.log(d.Debug,`Skipping transport '${O[n]}' because it is not supported in your environment.'`),new i(`'${O[n]}' is not supported in your environment.`,n);this._logger.log(d.Debug,`Selecting transport '${O[n]}'.`);try{return this._constructTransport(n)}catch(e){return e}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(e){if(this._logger.log(d.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(d.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),e?this._logger.log(d.Error,`Connection disconnected with error '${e}'.`):this._logger.log(d.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch((e=>{this._logger.log(d.Error,`TransportSendQueue.stop() threw error '${e}'.`)})),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(d.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this._logger.log(d.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!w.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(d.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=e.indexOf("?");let o=e.substring(0,-1===t?e.length:t);return"/"!==o[o.length-1]&&(o+="/"),o+="negotiate",o+=-1===t?"":e.substring(t),-1===o.indexOf("negotiateVersion")&&(o+=-1===t?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}class K{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new V,this._transportResult=new V,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new V),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new V;const e=this._transportResult;this._transportResult=void 0;const t="string"==typeof this._buffer[0]?this._buffer.join(""):K._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(t){e.reject(t)}}}static _concatBuffers(e){const t=e.map((e=>e.byteLength)).reduce(((e,t)=>e+t)),o=new Uint8Array(t);let n=0;for(const t of e)o.set(new Uint8Array(t),n),n+=t.byteLength;return o.buffer}}class V{constructor(){this.promise=new Promise(((e,t)=>[this._resolver,this._rejecter]=[e,t]))}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class Q{constructor(){this.name="json",this.version=1,this.transferFormat=F.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=p.instance);const o=H.parse(e),n=[];for(const e of o){const o=JSON.parse(e);if("number"!=typeof o.type)throw new Error("Invalid payload.");switch(o.type){case N.Invocation:this._isInvocationMessage(o);break;case N.StreamItem:this._isStreamItemMessage(o);break;case N.Completion:this._isCompletionMessage(o);break;case N.Ping:case N.Close:break;default:t.log(d.Information,"Unknown message type '"+o.type+"' ignored.");continue}n.push(o)}return n}writeMessage(e){return H.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const G={trace:d.Trace,debug:d.Debug,info:d.Information,information:d.Information,warn:d.Warning,warning:d.Warning,error:d.Error,critical:d.Critical,none:d.None};class Y{configureLogging(e){if(f.isRequired(e,"logging"),void 0!==e.log)this.logger=e;else if("string"==typeof e){const t=function(e){const t=G[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new S(t)}else this.logger=new S(e);return this}withUrl(e,t){return f.isRequired(e,"url"),f.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return f.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new L(e):this.reconnectPolicy=e:this.reconnectPolicy=new L,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new J(this.url,e);return M.create(t,this.logger||p.instance,this.protocol||new Q,this.reconnectPolicy)}}},691:(e,t,o)=>{o.r(t)}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=o(252);o(691);var t=document.querySelector("#divMessages"),n=document.querySelector("#tbMessage"),r=document.querySelector("#btnSend"),s=(new Date).getTime(),i=(new e.HubConnectionBuilder).withUrl("/hub").build();function c(){i.send("newMessage",s,n.value).then((function(){return n.value=""}))}i.on("messageReceived",(function(e,o){var n=document.createElement("div");n.innerHTML='<div class="message-author">'.concat(e,"</div><div>").concat(o,"</div>"),t.appendChild(n),t.scrollTop=t.scrollHeight})),i.start().catch((function(e){return document.write(e)})),n.addEventListener("keyup",(function(e){"Enter"===e.key&&c()})),r.addEventListener("click",c)})()})();